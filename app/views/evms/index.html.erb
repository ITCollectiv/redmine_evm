<h2>EVM Indicators</h2>
<% html_title('EVM Indicators') %>

<h4 id="baseline-title"></h4>

<!-- Dropdown for baselines -->
<%= label :baseline, "Select Baseline:" %>
<%= collection_select :baseline, :id, @baselines, :id, :name, :remote => true %>

<!-- Graph HTML -->
<div id="graph-wrapper">  
      <div class="graph-container">
          <div id="graph-lines"></div>
          <div id="graph-bars"></div>
      </div>
</div>

<!-- Gauges -->
<div>
	<canvas id="spi" class="evm-gauge"></canvas>
	<p>SPI - Schedule Performance Index <span id="spi-value"></span></p>
</div>
<div>
    <canvas id="cpi" class="evm-gauge"></canvas>
    <p>CPI - Cost Performance Index <span id="cpi-value"></span></p>
</div>

<div id="teste"></div>

<%= javascript_include_tag 'jquery',   :plugin => 'redmine_evm' %>
<%= javascript_include_tag 'flot',     :plugin => 'redmine_evm' %>
<%= javascript_include_tag 'flottime', :plugin => 'redmine_evm' %>
<%= javascript_include_tag 'gaugemin', :plugin => 'redmine_evm' %>
<%= stylesheet_link_tag    'evm' ,     :plugin => 'redmine_evm' %>

<script>
    $(document).ready( function (){
        $('#baseline_id').change( function (){
            alert('Select Box has been changed!');
            var value = $(this).val()

            $.ajax({
                url: '<%= project_evms_path(:json) %>',
                type: 'GET',
                data: value,
                success: function(data){
                  $("#teste").html(data.name)
                }
            })
        })
    })
</script>

<script>
    $(document).ready(function () {

        var graphData = [{
            // Planned Value
            <% planned_value_by_week = @baselines.first.planned_value_by_week %>
            <% planned_value_by_week_converted = Hash[planned_value_by_week.map{ |k, v| [k.to_time.to_i*1000, v] }] %>
            data: <%= raw planned_value_by_week_converted.to_a %>,
            label: "Planned Value",
            color: '#71c73e'
        }, {
	        // Actual Cost
	        <% actual_cost_by_week = @project.actual_cost_by_week %>
            <% actual_cost_by_week_converted = Hash[actual_cost_by_week.map{ |k, v| [k.to_time.to_i*1000, v] }] %>
            data: <%= raw actual_cost_by_week_converted.to_a %>,
            label: "Acutal Cost",
	        color: '#77b7c5',
	        points: { radius: 2, fillColor: '#77b7c5'} 
	    }, {
            // Earned Value
            <% earned_value_by_week = @project.earned_value_by_week %>
            <% earned_value_by_week_converted = Hash[earned_value_by_week.map{ |k, v| [k.to_time.to_i*1000, v] }] %>
            data: <%= raw earned_value_by_week_converted.to_a %>,
            label: "Earned Value",
            color: '#08088A'
        }];

        var options =   {
      		grid:    { show: true,
            color: "rgb(48, 48, 48)",
            tickColor: "rgba(255, 255, 255, 0)",
            backgroundColor: "rgb(255, 255, 255)" }
    	};

        // Lines
        $.plot($('#graph-lines'), graphData, {
            series: {
                points: {
                    show: true,
                    radius: 2
                },
                lines: {
                    show: true
                },
                shadowSize: 0
            },
            grid: {
            	show: true,
                color: '#646464',
                borderColor: 'transparent',
                borderWidth: 1,
                hoverable: true
            },
            xaxis: {
            	mode: "time", timeformat: "%d/%m/%y", minTickSize: [7, "day"]
            },
            yaxis: {
                
            }
        });
    });
</script>

<script>

    var ev = <%= @project.earned_value %> ;
    var pv = <%= @baselines.first.planned_value %> ;
    var spi = ev / pv ;

	var opts= {
	  lines: 12, // The number of lines to draw
	  angle: 0, // The length of each line
	  lineWidth: 0.21, // The line thickness
	  pointer: {
	    length: 0.65, // The radius of the inner circle
	    strokeWidth: 0.100, // The rotation offset
	    color: '#424242' // Fill color
	},
	limitMax: 'false',   // If true, the pointer will not go past the end of the gauge
	percentColors: [[0.0, "#ff0000" ],[0.30, "#f9c802"], [0.40, "#a9d70b" ], [0.60, "#a9d70b" ], [0.70, "#f9c802"], [1.0, "#ff0000"]],
	strokeColor: '#E0E0E0',   // to see which ones work best for you
	generateGradient: true
	};

	var target = document.getElementById('spi'); // your canvas element
	var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
	gauge.setTextField(document.getElementById("spi-value"));
	gauge.maxValue = 2; // set max gauge value
	gauge.animationSpeed = 40; // set animation speed (32 is default value)
	gauge.set(spi); // set actual value
</script>

<script>
    var ev = <%= @project.earned_value %> ;
    var ac = <%= @project.actual_cost %> ;
    var cpi = ev / ac ;

    var opts= {
      lines: 12, // The number of lines to draw
      angle: 0, // The length of each line
      lineWidth: 0.21, // The line thickness
      pointer: {
        length: 0.65, // The radius of the inner circle
        strokeWidth: 0.100, // The rotation offset
        color: '#424242' // Fill color
    },
    limitMax: 'false',   // If true, the pointer will not go past the end of the gauge
    percentColors: [[0.0, "#ff0000" ],[0.30, "#f9c802"], [0.40, "#a9d70b" ], [0.60, "#a9d70b" ], [0.70, "#f9c802"], [1.0, "#ff0000"]],
    strokeColor: '#E0E0E0',   // to see which ones work best for you
    generateGradient: true
    };

    var target = document.getElementById('cpi'); // your canvas element
    var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
    gauge.setTextField(document.getElementById("cpi-value"));
    gauge.maxValue = 2; // set max gauge value
    gauge.animationSpeed = 40; // set animation speed (32 is default value)
    gauge.set(cpi); // set actual value
</script>






